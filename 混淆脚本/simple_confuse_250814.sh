#!/bin/bash

#  Swift 简单混淆脚本（Perl 替换版 - 更可靠）
#  使用: ./simple_confuse.sh -c  (混淆)  |  ./simple_confuse.sh -u (恢复)
SWIFT_CLASSES=(
    "AlertType"
    "AnimationConfig"
    "AnimationState"
    "AppConfig"
    "AssociatedKeys"
    "AuthState"
    "AutoAdjustingTextView"
    "BaseVC"
    "BaseWebView"
    "ButtonConfig"
    "CLIPTokenizer"
    "ConnectionType"
    "Constants"
    "CustomAlertView"
    "CustomView"
    "DSP"
    "DYAIModel"
    "DYDownloader"
    "DYGetFileSizeTool"
    "DYHomeVC"
    "DYIMageTools"
    "DYLoadingView"
    "DYLogLevel"
    "DYLogger"
    "DYMineVC"
    "DYMyWorksVC"
    "DYNNetworkMonitor"
    "DYNetworkManager"
    "DYNetworkMonitor"
    "DYPipelineLoader"
    "DYRequestTool"
    "DealPicViewController"
    "DiffusionModel"
    "DownloadProgressBar"
    "DownloadState"
    "Downloader"
    "EraseTwoImageView"
    "GIFPlaceholderImageView"
    "GPT2Tokenizer"
    "GradientButton"
    "HTTPMethodType"
    "ImageContentViewController"
    "ImageGalleryViewController"
    "ImageLoader"
    "ImageLoadingDelegate"
    "ImageManager"
    "ImagePreviewViewController"
    "ImageProcessingService"
    "ImageTransitionView"
    "ImageTransitionViewDelegate"
    "LLAccessibilityAlertController"
    "LLNetworkAccessibility"
    "Logger"
    "MyResponseModel"
    "NetworkHelperRHVphAIj"
    "NetworkStatus"
    "NetworkType"
    "Pair"
    "PipelineLoader"
    "PipelinePreparationPhase"
    "ResponseData"
    "ScreenBrightnessManager"
    "ScreenInsetsUtil"
    "SubViewData"
    "ThreeImageFadeView"
    "UserInfo"
    "Util"
    "dyImagePreviewViewController"
    "myWorksItemCollectionViewCell"
    "testRequestVC"
    "threePicAnimationView"
    "twoPicAnimationView"
    "userInfoView"
)

# 方法名数组 (272个)
SWIFT_METHODS=(
    "Adapter"
    "AdapterLight"
    "AttnBlock"
    "BasicTransformerBlock"
    "BlockLayer"
    "CLIPAttention"
    "CLIPEncoderLayer"
    "CLIPMLP"
    "CLIPResidualAttentionBlock"
    "CLIPSelfAttention"
    "CLIPTextEmbedding"
    "CLIPTextModel"
    "ControlNet"
    "ControlNetv2"
    "CrossAttention"
    "DYLog"
    "Decoder"
    "Encoder"
    "Extractor"
    "FeedForward"
    "HintNet"
    "InputBlocks"
    "InputHintBlocks"
    "LoRABasicTransformerBlock"
    "LoRABlockLayer"
    "LoRACLIPAttention"
    "LoRACLIPEncoderLayer"
    "LoRACLIPMLP"
    "LoRACLIPTextModel"
    "LoRAConvolution"
    "LoRACrossAttention"
    "LoRADense"
    "LoRAFeedForward"
    "LoRAInputBlocks"
    "LoRAMiddleBlock"
    "LoRAOutputBlocks"
    "LoRAResBlock"
    "LoRASelfAttention"
    "LoRASpatialTransformer"
    "LoRATimeEmbed"
    "LoRAUNet"
    "MiddleBlock"
    "OpenCLIPEncoderLayer"
    "OpenCLIPMLP"
    "OpenCLIPTextModel"
    "OutputBlocks"
    "QuickGELU"
    "ResBlock"
    "ResnetBlock"
    "ResnetBlockLight"
    "SelfAttention"
    "SpatialTransformer"
    "StyleAdapter"
    "TimeEmbed"
    "UNet"
    "UNetv2"
    "VisionTransformer"
    "adapt"
    "addAndLayoutAlertView"
    "addImageViewConstraints"
    "addReachabilityCallBack"
    "additionalserializeContentrxpRWlLr"
    "analyzeContexthGQwcKzA"
    "backButtonTapped"
    "bpe"
    "calculateFolderSize"
    "calculateNavigationBarAndTabBarHeights"
    "cancelCurrentImageLoading"
    "cancelDownload"
    "centerImageView"
    "checkAndAnimateNext"
    "checkFileIsExist"
    "checkMemory"
    "checkModelSize"
    "checkNetWork"
    "cleanup"
    "cleanupModelsDirectory"
    "cleanupNetworkMonitor"
    "cleanupTmpDir"
    "clearText"
    "commonInit"
    "compositeImages"
    "compressImage"
    "compressToFileSize"
    "configAlert"
    "configureActionButtons"
    "configureBottomButton"
    "configureBrushSizeControls"
    "configureBrushSizeSlider"
    "configureConfigKJjsSxqI"
    "configureConfigecvamdlj"
    "configureForPreiOS13"
    "configureForiOS13AndLater"
    "configureGifImageView"
    "configureLabels"
    "configurePromptTextView"
    "configureResponseEJLSHxxN"
    "configureScrollView"
    "configureTopImageView"
    "contentHeight"
    "convert2RGBA"
    "convertTouchPointToImagePoint"
    "createBottomSheet"
    "createIconButton"
    "createImageView"
    "createMD5String"
    "createModelsDirectory"
    "createNetworkHelperRHVphAIj"
    "createSliderThumbImage"
    "createSubView"
    "cropImageWithRect"
    "currentReachable"
    "cutImage"
    "cutImage1"
    "deleteImage"
    "disableAlwaysOn"
    "downloadModel"
    "drawImageOnCanvas"
    "dsprunToGeneratePic"
    "dyJsonString"
    "enableAlwaysOn"
    "erase"
    "fixedStepSigmas"
    "formatSize"
    "getAllImageNames"
    "getAllImageNamesWithFullPath"
    "getDeviceIdFromKeychain"
    "getDeviceModelIdentifier"
    "getDocumentsFolderSize"
    "getImage"
    "getImageDisplayRect"
    "getImgMd5WithBase64"
    "getIphoneTotalMemory"
    "getNomalParamsDic"
    "getPairs"
    "getStringFromUserDefaults"
    "getUUID"
    "getUploadPicData"
    "gifImageWithData"
    "handleResponse"
    "handleSortingForStrArray"
    "hiddenAlert"
    "imageLoadingCompleted"
    "imagePreviewViewController"
    "imageToBase64"
    "imageTransitionView"
    "initStateWithLocalModel"
    "initializeInfoGQcmIBvunHMjzuqu"
    "initializeSessionCrcbcsmJ"
    "isNetworkAvailable"
    "isSimulator"
    "isUseWWANConnect"
    "isUseWifiConnect"
    "karrasSigmas"
    "loadGif"
    "loadImage"
    "logp"
    "md5HashWithImage"
    "notifyAll"
    "openCurrentAppInAppStore"
    "parseStatus"
    "performRequest"
    "postAccountData"
    "postBurialpointInfo"
    "postMaidian"
    "preventRepeatedPresses"
    "processStatedQPHxXOQ"
    "putImageData"
    "readFromKeychain"
    "requestGetData"
    "resizeImage"
    "retry"
    "saveImage"
    "saveImageToAlbum"
    "saveStringToUserDefaults"
    "saveToAlbum"
    "saveToKeychain"
    "scheduleNextAnimation"
    "scrollViewDidZoom"
    "sdrun"
    "selectSingerModelView"
    "serializeContentrxpRWlLr"
    "serializeContextxhWAoxPb"
    "setBackgroundColor"
    "setBottomBtnWithState"
    "setDefaulPlaceGifImage"
    "setDefaultGifBackgroundImage"
    "setGifPicHidden"
    "setInitialState"
    "setMaskVisible"
    "setSingleModelDownloadButtonHideState"
    "setUpUI"
    "setUpUIWithItemCount"
    "setup"
    "setupBackButton"
    "setupBaseView"
    "setupCollectionView"
    "setupConstraints"
    "setupCoverBgImageView"
    "setupCoverMoveImageView"
    "setupCoverMoveImageView1"
    "setupDownloadProgressSubscription"
    "setupDownloadSubscriber"
    "setupEmptyView"
    "setupErrorView"
    "setupImageView"
    "setupImageViews"
    "setupImageViewsWithUrls"
    "setupLoadingIndicator"
    "setupModelsScrollView"
    "setupMonitor"
    "setupNetworkAccessibility"
    "setupObservers"
    "setupPageViewController"
    "setupProgressView"
    "setupPromptClearButton"
    "setupPromptPlaceholder"
    "setupPromptTextView"
    "setupPromptTextViewCallback"
    "setupScrollView"
    "setupSingleModelItem"
    "setupUI"
    "setupView"
    "setupViews"
    "setupWebView"
    "sharedNetworkHelperRHVphAIj"
    "showAlert"
    "showAlertWithTitleAndButton"
    "showBottomSheet"
    "showCancelDownLoadAlert"
    "showDownLoadAlert"
    "showMemoryLimitAlert"
    "showNoNetWorkConnectAlert"
    "showToast"
    "signWithParameters"
    "startAnimation"
    "startBottomSheetAnimationImageView"
    "startCellularDataNotifier"
    "startCheck"
    "startEraseAndRestoreEffect"
    "startFadeAnimation"
    "startLoadingBackgroundImage"
    "startLoadingImage"
    "startMonitoring"
    "startReachabilityNotifier"
    "startReverseEraseAnimation"
    "stopAndClean"
    "stopMonitoring"
    "string2Float"
    "string2int"
    "textViewDidChange"
    "timeEmbedding"
    "tokenize"
    "unzipFile"
    "updateAccessibility"
    "updateConfig"
    "updateGradientLayer"
    "updateGradientLayerFrame"
    "updateHeight"
    "updateImageUrls"
    "updateImages"
    "updatePageNumberLabel"
    "updatePlaceholderVisibility"
    "updateSelectionLabel"
    "updateSelectionState"
    "updateZPositions"
    "uploadPic"
    "validateDataVmpLvWOl"
    "validateResultuFIfMJkP"
    "viewControllerForImage"
    "viewForZooming"
    "waitUntilDone"
)

# 属性名数组 (625个)
SWIFT_PROPERTIES=(
    "LLNetworkStateChangedNotification"
    "LowRank"
    "PrivacyPolicyUrl"
    "SingleModelDownloadButton"
    "TermsofUseUrl"
    "accelerationFactor"
    "accountSecToken"
    "actionSheet"
    "adapters"
    "addr"
    "addrFamily"
    "adjustedEraserRadius"
    "alamofireMethod"
    "alertType"
    "allImageNames"
    "alphasCumprod"
    "aniTime"
    "animationDelay"
    "animationGroup"
    "animationGroup1"
    "animationGroup2"
    "animationOptions"
    "apiTimeout"
    "appStoreID"
    "appUrl"
    "archive"
    "attention"
    "attentionBlock"
    "attentionRes"
    "attn1"
    "attn2"
    "attrString"
    "attributedMessage"
    "avatarImageView"
    "backBarButtonItem"
    "backButton"
    "backMaskView"
    "base64String"
    "baseUrl"
    "beta"
    "betas"
    "bgView"
    "bigram"
    "bottomHeight"
    "bottomSafeAreaHeight"
    "bottomSheetAnimationImageView"
    "bottomSheetButtonStackView"
    "bottomSheetHeight"
    "bottomSheetView"
    "bottomSheetViewOringleImageView"
    "bottomSheetViewProgreenLabel"
    "bottomSheetViewProgreenSlider"
    "bottomSheetViewResultImageView"
    "bottomToTabBarTopDistance"
    "bpeMerges"
    "bpeRanks"
    "bpeTokens"
    "brushSizeLabel"
    "brushSizeSlider"
    "bs"
    "button1"
    "button2"
    "button3"
    "buttonOne"
    "buttonStackView"
    "buttonTwo"
    "buttonWidth"
    "bytesPerPixel"
    "cIn"
    "cOut"
    "cachedHandlerdhvJzUMj"
    "calculatedSize"
    "canConnectAutomatically"
    "canConnectWithoutUserInteraction"
    "cancelButton"
    "cancellable"
    "cancellables"
    "canvasSize"
    "casualAttentionMask"
    "casualAttentionMaskGPU"
    "cellularData"
    "checkingWithBecomeActive"
    "chooseModelButton"
    "classEmbedding"
    "cleanedBase64String"
    "clearButton"
    "closeAlertEnable"
    "closeButton"
    "colorImage"
    "colorSpace"
    "compiledURL"
    "completedCount"
    "compression"
    "computedcachedHandlerdhvJzUMj"
    "confirmButton"
    "containerView"
    "contentHeightDidChange"
    "controls"
    "conv1"
    "conv2"
    "conv2d"
    "conv2d0"
    "conv2d1"
    "conv2d2"
    "conv2d3"
    "conv2d4"
    "conv2d5"
    "conv2d6"
    "conv2d7"
    "conv2dDown"
    "conv2dUp"
    "convIn"
    "convOut"
    "cosFreq"
    "coverBgImageView"
    "coverMoveImageView"
    "coverMoveImageView1"
    "cropRect"
    "croppedImage"
    "cs"
    "cumprod"
    "currentBundle"
    "currentImage"
    "currentImageUploadSuccessUrl"
    "currentImageView"
    "currentLocale"
    "currentPinchScale"
    "currentProgress"
    "currentSelectModelItemView"
    "currentState"
    "currentStatus"
    "currentText"
    "currentTime"
    "currentWebUrl"
    "customAlertController"
    "custonImageName"
    "cutImg"
    "dYHomeVC"
    "data1"
    "dataJson"
    "dataString"
    "decelerationFactor"
    "delButton"
    "denoised"
    "denoisedD"
    "denseDown"
    "denseUp"
    "desLabel1"
    "dic"
    "didTapSelectButtonCallback"
    "didTapSubView"
    "digest"
    "displayDuration"
    "dot"
    "downLoadCancellables"
    "downloadBtnHidden"
    "downloadButton"
    "downloadSubscriber"
    "downloadedURL"
    "downsample"
    "dps"
    "dps_state"
    "drawRect"
    "ds"
    "dspProgressP"
    "dss"
    "dummyData"
    "elapsedTimeInt"
    "emb"
    "embLayer"
    "embOut"
    "embedding"
    "emoji"
    "emptyImageView"
    "emptyTipLabel"
    "endColor"
    "endImagePoint"
    "endTime"
    "endToken"
    "endpoint"
    "eraseLayer"
    "eraseWidth"
    "eraserRadius"
    "err"
    "errorView"
    "et"
    "etCond"
    "etUncond"
    "extractor"
    "fadeAnimation"
    "fadeView"
    "failureCount"
    "fc"
    "fc0"
    "fc1"
    "fc10"
    "fc11"
    "fc2"
    "fe"
    "ff"
    "fileManager"
    "finalLayerNorm"
    "finalParams"
    "finalRect"
    "finalURL"
    "finderSortArray"
    "finderSortBlock"
    "firstNav"
    "firstRunFlag"
    "firstStr"
    "fixText"
    "folderSize"
    "frameDuration"
    "freq"
    "gb"
    "gelu"
    "generateTotalTime"
    "gifImageView"
    "gifInfo"
    "gifPlaceholder"
    "gifProperties"
    "hLast"
    "half"
    "handlers"
    "handlersQueue"
    "headImg"
    "heightRatio"
    "heights"
    "hiddenImageView"
    "high"
    "highIdx"
    "homeTopIMV"
    "homeTopImgVHeight"
    "hostName"
    "httpHeaders"
    "hw"
    "iconImage"
    "ids"
    "ifaddr"
    "imSv"
    "imUrl"
    "imageAspect"
    "imageHistory"
    "imageLoader"
    "imagePointX"
    "imagePointY"
    "imagePreviewVC"
    "imageRect"
    "imageVC"
    "imageView1"
    "imageView2"
    "imageViewSize"
    "imageViews"
    "imagesDirectory"
    "img"
    "inConv"
    "inLayerConv2d"
    "inLayerNorm"
    "initImage"
    "initImg"
    "initMask"
    "initNegMask"
    "initTimestep"
    "initialHeight"
    "initialPath"
    "initialPinchScale"
    "inputIdx"
    "inputLayer"
    "inputTextTipLabel"
    "internalCacheVySEyBml"
    "isAnimating"
    "isAutomaticallyAlert"
    "isConnected"
    "isDownloaded"
    "isDownloadingOrUpziping"
    "isHaveNetworkConnect"
    "isLoadingImage"
    "isLocalModel"
    "isMaskVisible"
    "isNew"
    "isReachable"
    "isReady"
    "isReversing"
    "isSelect"
    "isSelectedItem"
    "is_inBackGround"
    "itemAppearance"
    "itemHeight"
    "itemID"
    "itemImage"
    "itemWidth"
    "items"
    "kb"
    "keepGifPlaceholderVisible"
    "keyboardHeight"
    "keys"
    "lastClickTime"
    "lastTouchPoint"
    "lastUnzipProgress"
    "lastUpdateTime"
    "layerNorm1"
    "layerNorm2"
    "layerNorm3"
    "layerStart"
    "leftToRightAnimation"
    "leftToRightAnimation1"
    "leftToRightAnimation3"
    "linearEnd"
    "linearStart"
    "listenerId"
    "ln1"
    "ln2"
    "lnPost"
    "lnPre"
    "loadModelProgressBar"
    "loadModelTimePublisher"
    "loadModelTimeSubject"
    "loadingIndicator"
    "loadingView"
    "localBufferElRkGoae"
    "localDowned"
    "localModelDownUrl"
    "logMessage"
    "logSigma"
    "loginType"
    "logoIMV"
    "logs"
    "logvar"
    "lowIdx"
    "lrMargin"
    "mainColor"
    "maskLayer"
    "maskLayer1"
    "maskLayer2"
    "maskView1"
    "maskedImg"
    "maxDimension"
    "maxHeight"
    "maxInvRho"
    "maxSeed"
    "mb"
    "md5Signature"
    "messageLabel"
    "midAttn1"
    "midBlock1"
    "midBlock2"
    "midIdx"
    "middleBlock"
    "middleBlockOut"
    "minHeight"
    "minInvRho"
    "minRank"
    "minimumFileSize"
    "minimumUpdateInterval"
    "mlp"
    "modelFileName"
    "modelItemViews"
    "modelNameLabel"
    "modelTipLabel"
    "modelUrl"
    "models"
    "modelsDirectory"
    "modelsScrollView"
    "monitor"
    "msg"
    "mySelf"
    "nameLabel"
    "navigationBarBottom"
    "navigationBarHeight"
    "needsConnection"
    "netModelUrl"
    "networkType"
    "newConnectionStatus"
    "newDeviceId"
    "newHeight"
    "newNetworkType"
    "newSize"
    "newWord"
    "nextImageView"
    "nextIndex"
    "nextState"
    "nin"
    "noise"
    "nonceStr"
    "norm"
    "norm1"
    "norm2"
    "normOut"
    "nsRange"
    "numHeads"
    "observation"
    "okAction"
    "oldDenoised"
    "onNetworkStatusChange"
    "openid"
    "originalImageUploadSuccessUrl"
    "originalTextViewPosition"
    "originalViewFrameY"
    "out"
    "outConv"
    "outConv2d"
    "outLayerConv2d"
    "outLayerNorm"
    "outNorm"
    "outX"
    "outputBlocks"
    "outputLayer"
    "outputs"
    "outs"
    "overlayView"
    "packageName"
    "packagesFilename"
    "paddedImage"
    "paddingToken"
    "pageNumberLabel"
    "pairs"
    "panGesture"
    "passLayers"
    "pat"
    "path1"
    "path2"
    "percentageLabel"
    "phoneMemory"
    "phoneMemoryLimit"
    "picMd5"
    "pinchGesture"
    "pipelineLoader"
    "pixel"
    "pixelHeight"
    "pixelWidth"
    "positionEmbed"
    "positionTensor"
    "positionTensorGPU"
    "positionalEmbedding"
    "positions"
    "postQuantConv2d"
    "previousChannel"
    "previousCharacter"
    "previousIndex"
    "previousState"
    "processedMaskImage"
    "progressBar"
    "progressBarHidden"
    "progressBarValue"
    "progressObservation"
    "progressPublisher"
    "progressSubject"
    "progressUpdateThreshold"
    "progressValue"
    "progressView"
    "proj"
    "projIn"
    "projOut"
    "promptText"
    "promptTextView"
    "promptTextViewClearButton"
    "promptTextViewPlaceholderLabel"
    "purpleColor"
    "quantConv2d"
    "queries"
    "randomNumber"
    "reachabilityCallBack"
    "reachabilityRef"
    "readableSize"
    "readyAnimation"
    "realId"
    "remoteTokenjNVljyyA"
    "renderer"
    "requestHeaders"
    "resBlock"
    "resBlock1"
    "resBlock2"
    "residual"
    "resizedIMG"
    "resizedImage"
    "resnetBlock"
    "resultIMG"
    "resultImage"
    "reuploadButton"
    "rgbas"
    "ri"
    "rightImageView"
    "rightToLeftAnimation"
    "rightToLeftAnimation2"
    "rightToLeftAnimation4"
    "sample"
    "saveBtn"
    "scaleFactor"
    "scaledSize"
    "sdrgba"
    "secondNav"
    "selectAllButton"
    "selectButton"
    "selectedIDs"
    "selectionLabel"
    "selfPointer"
    "semaphore"
    "semaskLayer2"
    "setButton"
    "sharedHandlerRwgQWXgW"
    "sideLength"
    "sigma"
    "sigmas"
    "sigmasForTimesteps"
    "signKey"
    "sinFreq"
    "singleView"
    "singleViewWidth"
    "sizeStr"
    "skip"
    "sortedArray"
    "sortedFileURLs"
    "source"
    "speedFactor"
    "splits"
    "sqrtAlphasCumprod"
    "sqrtOneMinusAlphasCumprod"
    "stackView"
    "startColor"
    "startHeight"
    "startTime"
    "startToken"
    "startWidth"
    "stateSubscriber"
    "statusBarHeight"
    "statusChangeHandlers"
    "steps"
    "subViewDataArray"
    "subscribe"
    "successCount"
    "systemInfo"
    "tEnc"
    "t_emb"
    "tabBarHeight"
    "tabBarTop"
    "targetHeight"
    "targetRect"
    "targetSizeInPoints"
    "targetWidth"
    "tempArr"
    "tempMonitor"
    "tempQueue"
    "textModel"
    "textViewMaxY"
    "text_model_file"
    "text_model_file_exit"
    "thirdNav"
    "threeBtnwWidth"
    "thumbImage"
    "thumbPath"
    "thumbSize"
    "timeElapsed"
    "timeEmbed"
    "timestamp"
    "timestep"
    "timesteps"
    "tipLabel"
    "titleLb"
    "titleStr"
    "tmpDir"
    "tokenEmbed"
    "tokenizer"
    "tokens"
    "tokensTensor"
    "tokensTensorGPU"
    "tokeys"
    "topHeight"
    "topImageView"
    "topImageWidth"
    "topLogoImgV"
    "topMaskLayer"
    "topSafeAreaHeight"
    "toplogoImgV"
    "toqueries"
    "totalCount"
    "totalHeight"
    "totalMemoryInGB"
    "totalScreenHeight"
    "totalSteps"
    "touchPoint"
    "tovalues"
    "transformer"
    "transitionDuration"
    "trashUrl"
    "tryAgainBtn"
    "ts"
    "ui"
    "uncompressURL"
    "unconditionalGuidanceScale"
    "unconditionalTokens"
    "unet"
    "unifyheads"
    "uniqueId"
    "unknownToken"
    "unzipProgress"
    "uploadBtn"
    "uploadData"
    "upzipProgressPublisher"
    "upzipProgressSubject"
    "urlComponents"
    "urlString"
    "userInfoV"
    "userLabel"
    "uuid"
    "validUrls"
    "versionL"
    "viewAspect"
    "viewController"
    "viewHeight"
    "vipStatus"
    "visibleHeight"
    "vocabJSONData"
    "vocabulary"
    "wasAnimating"
    "webConfiguration"
    "widthRatio"
    "widths"
    "withdrawButton"
    "word"
    "workDir"
    "xIn"
    "ymimage"
    "zEnc"
    "zeroConv"
    "zeroConvs"
)

# 要忽略的文件夹
IGNORE_DIRS=("Pods" "thirdLibs")

# 文件配置
BACKUP_FILE=".backup.log"
SYMBOL_FILE=".symbol.log"
MAP_FILE="obfuscation_map.txt"
CONFUSE_FLAG=".confuseFlag"
BACKUP_EXTENSION=".bak"
NOT_REPLACED_FILE=".not_replaced.log"

# 输出颜色
info() { echo -e "[\033[1;32minfo\033[0m] $1"; }
error() { echo -e "[\033[1;31merror\033[0m] $1"; }

# 生成随机字符串（仅字母）
randomString() {
    openssl rand -base64 64 | tr -cd 'a-zA-Z' | head -c 16
}

removeIfExist() {
    if [ -f "$1" ]; then rm "$1"; fi
}

ignore_path_args() {
    local args=""
    for dir in "${IGNORE_DIRS[@]}"; do
        args+=" -path \"*/$dir/*\" -prune -o"
    done
    echo "$args"
}

backupFile() {
    local file=$1
    local fileName=${file##*/}
    local backupPath=${file/$fileName/.$fileName$BACKUP_EXTENSION}
    cp "$file" "$backupPath"
    echo "$backupPath" >> $BACKUP_FILE
}

backupAllSource() {
    info "backup all swift files (ignoring: ${IGNORE_DIRS[*]})"
    removeIfExist $BACKUP_FILE
    touch $BACKUP_FILE
    eval "find . $(ignore_path_args) -name \"*.swift\" -print" | while read file; do
        backupFile "$file"
    done
}

confuseOnly() {
    info "Starting confuse process..."
    
    # 清理旧映射文件
    removeIfExist $SYMBOL_FILE
    removeIfExist $MAP_FILE
    removeIfExist $NOT_REPLACED_FILE

    # 合并所有目标符号
    ALL_TARGETS=("${SWIFT_CLASSES[@]}" "${SWIFT_METHODS[@]}" "${SWIFT_PROPERTIES[@]}")
    
    # 为每个符号生成随机替换字符串
    for symbol in "${ALL_TARGETS[@]}"; do
        # 跳过空字符串和注释行
        [[ -z "$symbol" || "$symbol" =~ ^[[:space:]]*# ]] && continue
        
        rnd=$(randomString)
        echo "$symbol $rnd" >> $SYMBOL_FILE
        echo "$symbol -> $rnd" >> $MAP_FILE
        info "Will replace '$symbol' with '$rnd'"
    done

    # 获取所有 Swift 文件 - 修复 macOS 兼容性问题
    swift_files=()
    while IFS= read -r -d '' file; do
        swift_files+=("$file")
    done < <(find . -name "*.swift" -not -path "*/Pods/*" -not -path "*/thirdLibs/*" -print0)
    
    info "Found ${#swift_files[@]} Swift files to process"

    # 读取映射并执行替换（使用 Perl 做可靠的 \b 边界替换）
    while IFS=' ' read -r old new || [[ -n "$old" ]]; do
        [[ -z "$old" || -z "$new" ]] && continue
        
        info "Processing replacement: $old -> $new"
        replaced_any=0

        for file in "${swift_files[@]}"; do
            [[ ! -f "$file" ]] && continue

            # 先快速检查文件中是否包含旧标识（避免无谓的 perl 调用）
            if grep -q -F "$old" "$file" 2>/dev/null; then
                # 使用 Perl 进行替换：\b + \Q...\E 来保证转义旧符号
                # 这里使用 -i（就地修改，不留额外扩展），-pe 循环处理每行
                perl -i -pe 's/\b\Q'"$old"'\E\b/'"$new"'/g' "$file" 2>/dev/null || {
                    error "perl failed on $file for $old"
                    continue
                }

                # 如果替换后文件出现了新名字，则认为某处成功替换
                if grep -q -F "$new" "$file" 2>/dev/null; then
                    info "✓ Replaced '$old' -> '$new' in $(basename "$file")"
                    replaced_any=1
                fi
            fi
        done

        if [ "$replaced_any" -eq 0 ]; then
            # 记录未被替换（可能是没有出现该符号，或符号只出现在非 .swift 文件中）
            echo "$old $new" >> $NOT_REPLACED_FILE
            info "⚠ '$old' not found in any processed Swift file (recorded to $NOT_REPLACED_FILE)"
        fi
    done < "$SYMBOL_FILE"
    
    info "confuse done, mapping saved in $MAP_FILE"
    if [ -f "$NOT_REPLACED_FILE" ]; then
        info "Some symbols were not replaced. See $NOT_REPLACED_FILE"
    fi
}

unconfuse() {
    info "restore start..."
    if [ -f $BACKUP_FILE ]; then
        cat $BACKUP_FILE | while read backup; do
            backupName=${backup##*/}
            fileName=$(echo $backupName | sed "s/^\.//" | sed "s/$BACKUP_EXTENSION$//")
            filePath=${backup/$backupName/$fileName}
            cp "$backup" "$filePath"
            rm "$backup"
        done
        removeIfExist $SYMBOL_FILE
        removeIfExist $BACKUP_FILE
        removeIfExist $MAP_FILE
        removeIfExist $CONFUSE_FLAG
        removeIfExist $NOT_REPLACED_FILE
        info "restore done"
    else
        error "No backup found!"
    fi
}

safeConfuse() {
    unconfuse
    touch $CONFUSE_FLAG
    backupAllSource
    confuseOnly
}

cleanBackups() {
    info "cleaning all backup files..."
    
    # 查找并删除所有.bak备份文件
    eval "find . $(ignore_path_args) -name \"*$BACKUP_EXTENSION\" -print" | while read backup; do
        info "Removing backup file: $backup"
        rm "$backup"
    done
    
    # 清理相关的日志和配置文件
    removeIfExist $BACKUP_FILE
    removeIfExist $SYMBOL_FILE
    removeIfExist $MAP_FILE
    removeIfExist $CONFUSE_FLAG
    removeIfExist $NOT_REPLACED_FILE
    
    info "all backup files cleaned"
}

usage() {
    echo -e "\033[1;31musage: ./simple_confuse.sh [-u|c|clean]"
    echo -e "  -u     恢复源码"
    echo -e "  -c     备份并混淆"
    echo -e "  -clean 移除所有备份文件，移除后不能恢复"
    echo -e "EXAMPLE:"
    echo -e "  ./simple_confuse.sh -c"
    echo -e "  ./simple_confuse.sh -u"
    echo -e "  ./simple_confuse.sh -clean\033[0m"
}

main() {
    case $1 in
        "-u") unconfuse ;;
        "-c") safeConfuse ;;
        "-clean") cleanBackups ;;
        *) usage ;;
    esac
}

main $@
